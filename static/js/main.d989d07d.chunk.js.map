{"version":3,"sources":["TextParserFuncs.js","components/Layout.js","components/FillTheBlank.js","components/ParagraphWord.js","App.js","serviceWorker.js","index.js"],"names":["getParagraphWords","text","wordArray","replace","split","filter","el","console","log","getFillBlankInstruction","matches","match","getAdjacentFillBlankCharacters","array","length","printableArea","madLibsText","setMadLibsText","Container","Row","Col","Form","className","Group","Control","as","rows","value","onChange","e","target","Button","onClick","window","print","variant","fillBlankInstruction","adjacentFillBlankCharacters","word","App","useState","setPrintableArea","useEffect","paragraph","ParserFuncs","forEach","index","adjacentChars","push","FillTheBlank","key","ParagraphWord","Layout","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PAuBe,OACdA,kBAxBD,SAA2BC,GAC1B,IAIIC,EAHgBD,EAAKE,QADc,aAC0B,MAGrCC,MADO,0BAKnC,OAHAF,EAAYA,EAAUG,QAAO,SAACC,GAAD,MAAe,KAAPA,KAErCC,QAAQC,IAAI,cAAeN,GACpBA,GAgBPO,wBAbD,SAAiCR,GAChC,IACMS,EAAUT,EAAKU,MADI,aAEzB,OAAmB,OAAZD,EAAmBA,EAAQ,GAAK,IAWvCE,+BARD,SAAwCX,GACvC,IAAMY,EAAQZ,EAAKG,MAAM,KACzB,OAAOS,EAAMC,OAAS,EAAID,EAAM,GAAK,K,wCCjBvB,kBAAGE,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,eAA/B,OACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,oDACA,0HAIA,kBAACC,EAAA,EAAD,CAAMC,UAAU,uBACZ,kBAACD,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,QAAN,CACIC,GAAG,WACHC,KAAK,IACLJ,UAAU,uBACVK,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAeY,EAAEC,OAAOH,YAKrD,yBAAKL,UAAU,kBAAkBP,GAEjC,kBAACgB,EAAA,EAAD,CACIC,QAASC,OAAOC,MAChBC,QAAQ,OACRb,UAAU,aAHd,aAQA,uBAAGA,UAAU,UAAb,oBChCD,kBAAGc,EAAH,EAAGA,qBAAsBC,EAAzB,EAAyBA,4BAAzB,OACd,kBAAC,WAAD,KACC,0BAAMf,UAAU,cACf,0BAAMA,UAAU,eAAec,IAE/BC,EAA6B,MCLjB,kBAAGC,EAAH,EAAGA,KAAH,OAAc,kBAAC,WAAD,KAAWA,EAAX,M,MCOd,SAASC,IAAO,IAAD,EACYC,mBAH7B,4GAEiB,mBACnBxB,EADmB,KACNC,EADM,OAEgBuB,mBAAS,+BAFzB,mBAEnBzB,EAFmB,KAEJ0B,EAFI,KAiC1B,OA9BAC,qBAEA,WACI,IAAIC,EAAY,GAEFC,EAAY5C,kBAAkBgB,GAEtC6B,SAAQ,SAACP,EAAMQ,GACjB,IAAMV,EAAuBQ,EAAYnC,wBACrC6B,GAEJ,GAA6B,KAAzBF,EAA6B,CAC7B,IAAMW,EAAgBH,EAAYhC,+BAC9B0B,GAEJK,EAAUK,KACN,kBAACC,EAAD,CACIC,IAAKJ,EACLV,qBAAsBA,EACtBC,4BAA6BU,UAIrCJ,EAAUK,KAAK,kBAACG,EAAD,CAAeD,IAAKJ,EAAOR,KAAMA,QAIxDG,EAAiBE,KA3BU,CAAC3B,IA+B5B,kBAACoC,EAAD,CACIrC,cAAeA,EACfC,YAAaA,EACbC,eAAgBA,IClCRoC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAAS5C,MACvB,2D,YCVN6C,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.d989d07d.chunk.js","sourcesContent":["function getParagraphWords(text) {\n\tconst brackets_not_preceded_by_space = /(?<!\\s)\\[/g;\n\tconst textCleaned = text.replace(brackets_not_preceded_by_space, \" [\");\n\n\tconst spaces_not_within_brackets = /\\s+(?=[^[\\]]*(?:\\[|$))/; // https://stackoverflow.com/a/9644814/2228486\n\tvar wordArray = textCleaned.split(spaces_not_within_brackets);\n\twordArray = wordArray.filter((el) => el !== \"\");\n\n\tconsole.log(\"split words\", wordArray);\n\treturn wordArray;\n}\n\nfunction getFillBlankInstruction(text) {\n\tconst text_in_brackets = /\\[(.*?)\\]/;\n\tconst matches = text.match(text_in_brackets);\n\treturn matches !== null ? matches[1] : \"\";\n}\n\nfunction getAdjacentFillBlankCharacters(text) {\n\tconst array = text.split(\"]\");\n\treturn array.length > 1 ? array[1] : \"\";\n}\n\nexport default {\n\tgetParagraphWords,\n\tgetFillBlankInstruction,\n\tgetAdjacentFillBlankCharacters,\n};\n","import React from \"react\";\nimport { Container, Row, Col, Button, Form } from \"react-bootstrap\";\n\nexport default ({ printableArea, madLibsText, setMadLibsText }) => (\n    <Container>\n        <Row>\n            <Col>\n                <h1>Printable \"Mad Libs\"</h1>\n                <p>\n                    Type or paste your story below. Use square brackets to\n                    create blanks in the text. Have fun!\n                </p>\n                <Form className=\"mad-libs-entry-area\">\n                    <Form.Group>\n                        <Form.Control\n                            as=\"textarea\"\n                            rows=\"6\"\n                            className=\"mad-libs-create-text\"\n                            value={madLibsText}\n                            onChange={(e) => setMadLibsText(e.target.value)}\n                        />\n                    </Form.Group>\n                </Form>\n\n                <div className=\"printable-area\">{printableArea}</div>\n\n                <Button\n                    onClick={window.print}\n                    variant=\"dark\"\n                    className=\"print-btn\"\n                >\n                    Print me!\n                </Button>\n\n                <p className=\"credit\">by Ben Kniaz</p>\n            </Col>\n        </Row>\n    </Container>\n);\n","import React, { Fragment } from \"react\";\n\nexport default ({ fillBlankInstruction, adjacentFillBlankCharacters }) => (\n\t<Fragment>\n\t\t<span className=\"fill-blank\">\n\t\t\t<span className=\"instruction\">{fillBlankInstruction}</span>\n\t\t</span>\n\t\t{adjacentFillBlankCharacters}{\" \"}\n\t</Fragment>\n);\n","import React, { Fragment } from \"react\";\n\nexport default ({ word }) => <Fragment>{word} </Fragment>;\n","import React, { useState, useEffect } from \"react\";\nimport ParserFuncs from \"./TextParserFuncs\";\nimport Layout from \"./components/Layout\";\nimport FillTheBlank from \"./components/FillTheBlank\";\nimport ParagraphWord from \"./components/ParagraphWord\";\nimport \"./App.scss\";\n\nconst example = `Amanda [past-tense verb] a really delicious [adjective] pie because today she turned [number] years old.`;\n\nexport default function App() {\n    const [madLibsText, setMadLibsText] = useState(example);\n    const [printableArea, setPrintableArea] = useState(<div />);\n    useEffect(createPrintableText, [madLibsText]);\n\n    function createPrintableText() {\n        var paragraph = [];\n\n        const words = ParserFuncs.getParagraphWords(madLibsText);\n\n        words.forEach((word, index) => {\n            const fillBlankInstruction = ParserFuncs.getFillBlankInstruction(\n                word\n            );\n            if (fillBlankInstruction !== \"\") {\n                const adjacentChars = ParserFuncs.getAdjacentFillBlankCharacters(\n                    word\n                );\n                paragraph.push(\n                    <FillTheBlank\n                        key={index}\n                        fillBlankInstruction={fillBlankInstruction}\n                        adjacentFillBlankCharacters={adjacentChars}\n                    />\n                );\n            } else {\n                paragraph.push(<ParagraphWord key={index} word={word} />);\n            }\n        });\n\n        setPrintableArea(paragraph);\n    }\n\n    return (\n        <Layout\n            printableArea={printableArea}\n            madLibsText={madLibsText}\n            setMadLibsText={setMadLibsText}\n        />\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.scss\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}